# This file was automatically generated by running:
#
#   scripts/gen_ext.cr
#
# libvips version: 8.12.2
#
# DO NOT EDIT
#
# Changes to this file may cause incorrect behavior and will be lost if the code is regenerated
#

module Vips
  class MutableImage
    # Draw a circle on an image
    #
    # ```
    # # image.mutate { |x| x.draw_circle(ink, cx, cy, radius, {fill: Bool} }
    # ```
    #
    #
    # Input Parameters
    #
    # **Required**
    #
    # *ink* : Array(Float64) - Color for pixels
    #
    # *cx* : Int32 - Centre of draw_circle
    #
    # *cy* : Int32 - Centre of draw_circle
    #
    # *radius* : Int32 - Radius in pixels
    #
    # _Optionals_
    #
    # *fill* : Bool - Draw a solid object
    #
    def draw_circle(ink : Array(Float64), cx : Int32, cy : Int32, radius : Int32, **kwargs) : Nil
      options = Optional.new(**kwargs)
      self.call("draw_circle", options, ink, cx, cy, radius)
    end

    # Flood-fill an area
    #
    # ```
    # # image.mutate { |x| x.draw_flood(ink, x, y, {test: Image, equal: Bool} }
    # ```
    #
    #
    # Input Parameters
    #
    # **Required**
    #
    # *ink* : Array(Float64) - Color for pixels
    #
    # *x* : Int32 - DrawFlood start point
    #
    # *y* : Int32 - DrawFlood start point
    #
    # _Optionals_
    #
    # *test* : Image - Test pixels in this image
    #
    # *equal* : Bool - DrawFlood while equal to edge
    #
    def draw_flood(ink : Array(Float64), x : Int32, y : Int32, **kwargs) : Nil
      options = Optional.new(**kwargs)
      self.call("draw_flood", options, ink, x, y)
    end

    # Paint an image into another image
    #
    # ```
    # # image.mutate { |x| x.draw_image(sub, x, y, {mode: Enums::CombineMode} }
    # ```
    #
    #
    # Input Parameters
    #
    # **Required**
    #
    # *sub* : Image - Sub-image to insert into main image
    #
    # *x* : Int32 - Draw image here
    #
    # *y* : Int32 - Draw image here
    #
    # _Optionals_
    #
    # *mode* : Enums::CombineMode - Combining mode
    #
    def draw_image(sub : Image, x : Int32, y : Int32, **kwargs) : Nil
      options = Optional.new(**kwargs)
      self.call("draw_image", options, sub, x, y)
    end

    # Draw a line on an image
    #
    # ```
    # # image.mutate { |x| x.draw_line(ink, x1, y1, x2, y2 }
    # ```
    #
    #
    # Input Parameters
    #
    # **Required**
    #
    # *ink* : Array(Float64) - Color for pixels
    #
    # *x1* : Int32 - Start of draw_line
    #
    # *y1* : Int32 - Start of draw_line
    #
    # *x2* : Int32 - End of draw_line
    #
    # *y2* : Int32 - End of draw_line
    #
    def draw_line(ink : Array(Float64), x1 : Int32, y1 : Int32, x2 : Int32, y2 : Int32) : Nil
      self.call("draw_line", ink, x1, y1, x2, y2)
    end

    # Draw a mask on an image
    #
    # ```
    # # image.mutate { |x| x.draw_mask(ink, mask, x, y }
    # ```
    #
    #
    # Input Parameters
    #
    # **Required**
    #
    # *ink* : Array(Float64) - Color for pixels
    #
    # *mask* : Image - Mask of pixels to draw
    #
    # *x* : Int32 - Draw mask here
    #
    # *y* : Int32 - Draw mask here
    #
    def draw_mask(ink : Array(Float64), mask : Image, x : Int32, y : Int32) : Nil
      self.call("draw_mask", ink, mask, x, y)
    end

    # Paint a rectangle on an image
    #
    # ```
    # # image.mutate { |x| x.draw_rect(ink, left, top, width, height, {fill: Bool} }
    # ```
    #
    #
    # Input Parameters
    #
    # **Required**
    #
    # *ink* : Array(Float64) - Color for pixels
    #
    # *left* : Int32 - Rect to fill
    #
    # *top* : Int32 - Rect to fill
    #
    # *width* : Int32 - Rect to fill
    #
    # *height* : Int32 - Rect to fill
    #
    # _Optionals_
    #
    # *fill* : Bool - Draw a solid object
    #
    def draw_rect(ink : Array(Float64), left : Int32, top : Int32, width : Int32, height : Int32, **kwargs) : Nil
      options = Optional.new(**kwargs)
      self.call("draw_rect", options, ink, left, top, width, height)
    end

    # Blur a rectangle on an image
    #
    # ```
    # # image.mutate { |x| x.draw_smudge(left, top, width, height }
    # ```
    #
    #
    # Input Parameters
    #
    # **Required**
    #
    # *left* : Int32 - Rect to fill
    #
    # *top* : Int32 - Rect to fill
    #
    # *width* : Int32 - Rect to fill
    #
    # *height* : Int32 - Rect to fill
    #
    def draw_smudge(left : Int32, top : Int32, width : Int32, height : Int32) : Nil
      self.call("draw_smudge", left, top, width, height)
    end
  end
end
